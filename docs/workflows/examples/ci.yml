# Main CI Pipeline for neoRL-industrial-gym
# This workflow runs tests, linting, and validation on every push and PR

name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  # JAX configuration for consistent testing
  JAX_PLATFORM_NAME: cpu
  JAX_ENABLE_X64: false
  # Disable JAX warnings in CI
  JAX_LOG_COMPILES: 0
  # Python configuration
  PYTHONPATH: src
  PYTHONBUFFERED: 1
  PYTHONDONTWRITEBYTECODE: 1

jobs:
  # Fast initial checks
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install pre-commit
        run: pip install pre-commit
      
      - name: Run pre-commit
        run: pre-commit run --all-files

  # Comprehensive test matrix
  test-matrix:
    name: Test (Python ${{ matrix.python-version }}, ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: pre-commit
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
        os: [ubuntu-latest, windows-latest, macos-latest]
        exclude:
          # Exclude some combinations to reduce CI time
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
        
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential
      
      - name: Install JAX dependencies
        run: |
          pip install --upgrade pip setuptools wheel
          pip install "jax[cpu]" jaxlib
      
      - name: Install package with test dependencies
        run: |
          pip install -e ".[test,dev]"
      
      - name: Run linting
        run: |
          ruff check src/ tests/
          ruff format --check src/ tests/
      
      - name: Run traditional linting (compatibility)
        run: |
          flake8 src/ tests/
          black --check src/ tests/
          isort --check-only src/ tests/
      
      - name: Type checking with mypy
        run: mypy src/ --config-file pyproject.toml
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --cov=neorl_industrial --cov-report=xml --cov-report=term-missing
      
      - name: Run safety validation tests
        run: |
          pytest tests/ -m safety -v
      
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.9' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  # Integration and end-to-end tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install package
        run: |
          pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --timeout=300
      
      - name: Run end-to-end tests
        run: |
          pytest tests/e2e/ -v --timeout=600
      
      - name: Run performance tests
        run: |
          pytest tests/performance/ -v -m "not slow"

  # Docker build and test
  docker-build:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          push: false
          tags: neorl-industrial:test-prod
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Build development image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: development
          push: false
          tags: neorl-industrial:test-dev
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test production image
        run: |
          docker run --rm neorl-industrial:test-prod python -c "import neorl_industrial; print('Production image OK')"
      
      - name: Test development image
        run: |
          docker run --rm neorl-industrial:test-dev python -m pytest tests/test_basic.py -v
      
      - name: Run container security scan
        run: |
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            -v $(pwd):/project aquasec/trivy:latest image neorl-industrial:test-prod

  # Documentation build test
  docs-build:
    name: Documentation Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install documentation dependencies
        run: |
          pip install --upgrade pip
          pip install -e ".[docs]"
      
      - name: Build documentation
        run: |
          sphinx-build -b html docs/ docs/_build/html
      
      - name: Check documentation links
        run: |
          sphinx-build -b linkcheck docs/ docs/_build/linkcheck

  # Safety and compliance validation
  safety-validation:
    name: Safety Validation
    runs-on: ubuntu-latest
    needs: test-matrix
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install package
        run: |
          pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Run industrial safety validation
        run: |
          python scripts/validate_safety.py --env all --strict
      
      - name: Run safety constraint validation
        run: |
          pytest tests/unit/test_safety_constraints.py -v --strict-markers
      
      - name: Generate safety report
        run: |
          python scripts/generate_safety_report.py --output safety-report.json
      
      - name: Upload safety report
        uses: actions/upload-artifact@v4
        with:
          name: safety-validation-report
          path: safety-report.json
          retention-days: 30

  # Deployment readiness check
  deployment-readiness:
    name: Deployment Readiness
    runs-on: ubuntu-latest
    needs: [integration-tests, docker-build, safety-validation]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install package
        run: |
          pip install --upgrade pip
          pip install -e ".[test]"
      
      - name: Run deployment readiness checks
        run: |
          # Check that all required environment variables are documented
          python scripts/validate_config.py --check-env-vars
          
          # Validate production configuration
          python scripts/validate_config.py --config production
          
          # Check database migrations (if applicable)
          # python scripts/check_migrations.py
          
          # Validate monitoring configuration
          python scripts/validate_monitoring.py
      
      - name: Generate deployment checklist
        run: |
          python scripts/generate_deployment_checklist.py > deployment-checklist.md
      
      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deployment-readiness
          path: |
            deployment-checklist.md
            config-validation-report.json
          retention-days: 7

  # Notify on failure
  notify-failure:
    name: Notify on Failure
    runs-on: ubuntu-latest
    needs: [test-matrix, integration-tests, docker-build, safety-validation]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Notify Slack on failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#neorl-ci'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}